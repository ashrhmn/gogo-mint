/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Test, TestInterface } from "../../../contracts/test.sol/Test";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_root",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "configRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "emptyRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "endTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "mintCharge",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "whitelistRoot",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "maxMintPerWallet",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxMintInSale",
        type: "uint256",
      },
    ],
    name: "strConfigBytes",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "bool",
        name: "enabled",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "startTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "endTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "mintCharge",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "whitelistRoot",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "maxMintPerWallet",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxMintInSale",
        type: "uint256",
      },
    ],
    name: "verifyConfig",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516104c33803806104c383398101604081905261002f91610037565b60005561004f565b600060208284031215610048578081fd5b5051919050565b6104658061005e6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632cbfb8131461005c5780635a9a49c7146100845780637d7afa1a1461009957806380e73783146100ba578063b44c9fcd146100c3575b600080fd5b61006f61006a3660046102d4565b6100cc565b60405190151581526020015b60405180910390f35b610097610092366004610354565b61011e565b005b6100ac6100a73660046103a0565b61012f565b60405190815260200161007b565b6100ac60015481565b6100ac60005481565b6000610111896000546100e48b8b8b8b8b8b8b61012f565b6040516020016100f691815260200190565b60405160208183030381529060405280519060200120610189565b9998505050505050505050565b610129838383610189565b50505050565b6040805197151560f81b6020808a0191909152602189019790975260418801959095526061870193909352608186019190915260a185015260c1808501919091528151808503909101815260e19093019052815191012090565b600082610196858461019f565b14949350505050565b600081815b84518110156102195760008582815181106101cf57634e487b7160e01b600052603260045260246000fd5b602002602001015190508083116101f55760008381526020829052604090209250610206565b600081815260208490526040902092505b5080610211816103f2565b9150506101a4565b509392505050565b600082601f830112610231578081fd5b8135602067ffffffffffffffff8083111561024e5761024e610419565b8260051b604051601f19603f8301168101818110848211171561027357610273610419565b60405284815283810192508684018288018501891015610291578687fd5b8692505b858310156102b3578035845292840192600192909201918401610295565b50979650505050505050565b803580151581146102cf57600080fd5b919050565b600080600080600080600080610100898b0312156102f0578384fd5b883567ffffffffffffffff811115610306578485fd5b6103128b828c01610221565b98505061032160208a016102bf565b979a9799505050506040860135956060810135956080820135955060a0820135945060c0820135935060e0909101359150565b600080600060608486031215610368578283fd5b833567ffffffffffffffff81111561037e578384fd5b61038a86828701610221565b9660208601359650604090950135949350505050565b600080600080600080600060e0888a0312156103ba578283fd5b6103c3886102bf565b9960208901359950604089013598606081013598506080810135975060a0810135965060c00135945092505050565b600060001982141561041257634e487b7160e01b81526011600452602481fd5b5060010190565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220af73006f2fa3beb3695bca02a5900eace724a87e916d2af5485e8ed2c44a28e564736f6c63430008040033";

type TestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Test__factory extends ContractFactory {
  constructor(...args: TestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _root: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Test> {
    return super.deploy(_root, overrides || {}) as Promise<Test>;
  }
  override getDeployTransaction(
    _root: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_root, overrides || {});
  }
  override attach(address: string): Test {
    return super.attach(address) as Test;
  }
  override connect(signer: Signer): Test__factory {
    return super.connect(signer) as Test__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestInterface {
    return new utils.Interface(_abi) as TestInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Test {
    return new Contract(address, _abi, signerOrProvider) as Test;
  }
}
